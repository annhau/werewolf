{"version":3,"sources":["SetUpPlayer.js","Player.js","SetUpRole.js","Werewolf.js","Night.js","Day.js","serviceWorker.js","index.js"],"names":["SetUpPlayer","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerNames","inherits","createClass","key","value","e","preventDefault","slice","inp","refs","player","trim","replace","l","toUpperCase","setState","error","includes","push","focus","_this2","row","forEach","n","react_default","a","createElement","className","onSubmit","addPlayer","bind","type","ref","onClick","submitPlayerNames","Component","Player","pname","role","active_wolf","init_stats","bitten","protected","seer","muted","hunted","disabled","previous_target","oplayer","r","SetUpRole","numPlayer","length","total","ROLES","count","Number","_this3","playerRoles","i","array","j","Math","floor","random","temp","shuffleArray","playerList","wolfNo","index","p","submitPlayer","_this4","map","changeSelectRemain","readOnly","remaining","doneButton","createPlayers","id","createSelection","sleep","ms","Promise","resolve","setTimeout","Night","currentPlayer","players","currentIndex","actions","_addAction","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","innerHTML","refDiv","checkbox","childNodes","checked","style","background","color","submitActions","stop","_x","apply","arguments","divRef","changeColor","name","required","htmlFor","night","addAction","Day","executePlayer","originPlayers","events","gameOver","logs","restart","skipExecute","App","phase","names","filter","reduce","current","activeWolf","getActiveWolf","target","do_action","dead_players","countVillagers","SetUpPlayer_SetUpPlayer","SetUpRole_SetUpRole","Night_Night","Day_Day","Boolean","window","location","hostname","match","ReactDOM","render","Werewolf","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a554dc7e.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nexport class SetUpPlayer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerNames: []\n        }\n    }\n\n    addPlayer(e) {\n        e.preventDefault();\n        let playerNames = this.state.playerNames.slice();\n        let inp = this.refs.player.value.trim().replace(/\\b\\w/g, l => l.toUpperCase());\n        if (inp === \"\") {\n            this.setState({error: \"Do not use empty string\"})\n        } else if (playerNames.includes(inp)) {\n            this.setState({error: \"Do not use the same name\"});\n        } else {\n            playerNames.push(inp);\n            this.setState({'playerNames': playerNames, error: null})\n        }\n        this.refs.player.focus();\n        this.refs.player.value = \"\";\n    }\n\n    render() {\n        let row = [];\n        let playerNames = this.state.playerNames;\n        this.state.playerNames.forEach(n => row.push(\n            <li className=\"\" key={n}>{n}</li>));\n        return (\n            <div className=\"animated zoomIn\">\n                <h3>Add players to the game</h3>\n                {this.state.error ? <p className=\"text-danger\"> {this.state.error}</p> : null}\n                <ul className=\"mb-3\">{row}</ul>\n                <form className=\"form-inline\" onSubmit={(e) => this.addPlayer.bind(this)(e)}>\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control\" ref=\"player\"/>\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-danger\" type=\"submit\">Add</button>\n                        </div>\n                    </div>\n                </form>\n                <button className=\"btn btn-danger\" onClick={() => this.props.submitPlayerNames(playerNames)}>\n                    Done\n                </button>\n            </div>\n        );\n    }\n}\n","export class Player {\n    constructor(pname, role) {\n        this.pname = pname;\n        this.role = role;\n        this.active_wolf = null;\n        this.init_stats();\n    }\n\n    init_stats() {\n        this.bitten = false;\n        this.protected = false;\n        this.seer = false;\n        this.muted = false;\n        this.hunted = false;\n        this.disabled = false;\n        this.previous_target = null;\n    }\n\n    do_action(oplayer) {\n        this.previous_target = oplayer;\n        if (this.disabled) return;\n        let r = this.role;\n        if (r === 'Maria')\n            oplayer.disabled = true;\n        else if (r === 'Guard')\n            oplayer.protected = true;\n        else if (r === 'Spell Caster')\n            oplayer.muted = true;\n        else if (r === 'Seer')\n            oplayer.seer = true;\n        else if (r === 'Hunter')\n            oplayer.hunted = true;\n        else if (this.active_wolf !== null) {\n            if (!oplayer.protected) {\n                if (oplayer.role === 'Cursed') {\n                    oplayer.role = 'Werewolf';\n                    oplayer.active_wolf = 69\n                } else\n                    oplayer.bitten = true;\n            }\n        }\n    }\n}\n","import React, {Component} from \"react\";\nimport {Player} from \"./Player\";\nimport {ROLES, shuffleArray} from \"./Werewolf\";\n\nexport class SetUpRole extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numPlayer: this.props.playerNames.length,\n        }\n    };\n\n    changeSelectRemain() {\n        // Count selected player if calculate remaining\n        let total = 0;\n        ROLES.forEach(role => {\n            let count = Number(this.refs[role].value);\n            if (count > 0)\n                total += count\n        });\n        this.setState({numPlayer: this.props.playerNames.length - total});\n    }\n\n    createPlayers() {\n        let playerRoles = [];\n        ROLES.forEach(role => {\n            let count = Number(this.refs[role].value); // get role's value from input tag\n            for (let i = 0; i < count; i++)\n                playerRoles.push(role);\n        });\n        if (playerRoles.length !== this.props.playerNames.length) return; // return if not satisfy\n        shuffleArray(playerRoles); // randomly shuffle roles\n\n        let playerList = [];\n        let wolfNo = 1;\n        this.props.playerNames.forEach((n, index) => {\n            let p = new Player(n, playerRoles[index]);\n            if (p.role === 'Werewolf') {\n                p.active_wolf = wolfNo;\n                wolfNo += 1\n            }\n            playerList.push(p);\n        });\n        this.props.submitPlayer(playerList);\n    }\n\n    createSelection() {\n        return ROLES.map(role =>\n            <li className=\"list-group-item\" key={role}>\n                {role}\n                <span className=\"btn float-right\"\n                      onClick={() => {\n                          this.refs[role].value = Number(this.refs[role].value) + 1;\n                          this.changeSelectRemain()\n                      }}>\n                    <i className=\"fas fa-plus-circle text-white\"/>\n                </span>\n                <input ref={role} className=\"form-control float-right roleInput\" type=\"text\" readOnly/>\n                <span className=\"btn float-right\"\n                      onClick={() => {\n                          let value = this.refs[role].value;\n                          this.refs[role].value = value > 0 ? Number(value) - 1 : value;\n                          this.changeSelectRemain();\n                      }}>\n                    <i className=\"fas fa-minus-circle text-white\"/>\n                </span>\n            </li>\n        );\n    }\n\n    render() {\n        let error = this.state.numPlayer < 0 ? <p className=\"text-danger\"> Number of roles is not correct </p> : null;\n        let remaining = this.state.numPlayer > 0 ? this.state.numPlayer + ' remain' : null;\n        let doneButton = error ? error :\n            <button className=\"btn btn-danger\" onClick={this.createPlayers.bind(this)}>Done</button>;\n        return (\n            <div className=\"animated slideInRight\">\n                <h3>Select roles: {remaining}</h3>\n                <ul className=\"list-group\" id=\"roleSelection\">\n                    {this.createSelection()}\n                </ul>\n                <br/>\n                {doneButton}\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport {SetUpPlayer} from \"./SetUpPlayer\";\nimport {SetUpRole} from \"./SetUpRole\";\nimport {Night} from \"./Night\";\nimport {Day} from \"./Day\";\n\n\nexport const ROLES = ['Maria', 'Guard', 'Spell Caster', 'Seer', 'Hunter', 'Werewolf', 'Cursed', 'Villager'];\n\nexport function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            phase: 'setUpName',\n            players: [],\n            playerNames: [],\n            events: [],\n            night: 1,\n            logs: [],\n        }\n    }\n\n    submitPlayerNames(names) {\n        if (names.length !== 0) {\n            this.setState({\n                playerNames: names,\n                phase: 'setUpRole'\n            })\n        }\n    }\n\n    submitPlayer(players) {\n        let gameOver = this.gameOver(players);\n        if (gameOver) {\n            this.setState({\n                players: players,\n                originPlayers: players.slice(0),\n                phase: 'day',\n                gameOver: gameOver\n            })\n        } else {\n            this.setState({\n                players: players,\n                originPlayers: players.slice(0),\n                phase: 'night'\n            })\n        }\n    }\n\n    getActiveWolf() {\n        return this.state.players.filter(e => e.active_wolf !== null)\n            .reduce((prev, current) => (prev.active_wolf < current.active_wolf) ? prev : current)\n    }\n\n    submitActions(actions) {\n        let players = this.state.players;\n\n        // Handle Actions\n        let activeWolf = this.getActiveWolf();\n        let logs = this.state.logs;\n        logs.push(<p key={'log-title' + this.state.night}><b>Night {this.state.night}</b></p>);\n        ROLES.forEach(role => {\n            players.forEach((player, index) => {\n                if (player.role === role) {\n                    let target = players[actions[index]];\n                    if (player.role !== 'Werewolf') {\n                        player.do_action(target);\n                    } else if (player === activeWolf) {\n                        player.do_action(target);\n                    }\n                    // Add logs\n                    logs.push(<li\n                        key={'log' + logs.length}>{player.role}{player.active_wolf} choose {target.role}{target.active_wolf}</li>)\n                }\n            })\n        });\n\n        // Handle events\n        let dead_players = [];\n        let events = [];\n        players.forEach((player) => {\n            if (player.bitten) {\n                events.push(<li key={'die-event' + player.id}>{player.pname} died.</li>);\n                dead_players.push(player);\n                if (player.role === 'Hunter' && player.previous_target !== player) {\n                    events.push(<li\n                        key={'die-event' + player.previous_target.id}>{player.previous_target.pname} died.</li>);\n                    dead_players.push(player.previous_target);\n                }\n            }\n            if (player.muted)\n                events.push(<li key={'mute-event' + player.id}>{player.pname} is muted.</li>);\n            if (player.seer) {\n                if (player.bitten)\n                    events.push(<li key={'truth-event' + player.id}>{player.pname} needs to tell truth</li>);\n                else\n                    events.push(<li key={'truth-event' + player.id}>{player.pname} needs to tell truth\n                        (truth: {player.previous_target.pname})</li>)\n            }\n            player.init_stats();\n        });\n\n        players = players.filter((e) => !dead_players.includes(e));\n        this.setState({\n            phase: 'day',\n            events: events,\n            players: players,\n            gameOver: this.gameOver(players),\n            logs: logs\n        });\n    }\n\n    gameOver(players) {\n        let countVillagers = 0;\n        players.forEach(player => {\n            countVillagers = player.role === 'Werewolf' ? countVillagers - 1 : countVillagers + 1\n        });\n        if (countVillagers === players.length)\n            return 'Villagers won.';\n        else if (countVillagers <= 0)\n            return 'Wolfs won.';\n        else\n            return null\n    }\n\n    restart() {\n        this.setState({\n            phase: 'setUpName',\n            players: [],\n            playerNames: [],\n            events: [],\n            night: 1,\n            logs: [],\n        })\n    }\n\n    executePlayer(player) {\n        let players = this.state.players.filter(e => e !== player);\n        let gameOver = this.gameOver(players);\n        if (!gameOver) {\n            this.setState((state, props) => {\n                return {\n                    players: players,\n                    phase: 'night',\n                    night: state.night + 1\n                }\n            })\n        } else {\n            this.setState({\n                players: players,\n                phase: 'day',\n                gameOver: gameOver\n            })\n        }\n\n    }\n\n    render() {\n        let phase = this.state.phase;\n\n        if (phase === 'setUpName')\n            return <SetUpPlayer submitPlayerNames={this.submitPlayerNames.bind(this)}/>;\n        else if (phase === 'setUpRole')\n            return <SetUpRole playerNames={this.state.playerNames} submitPlayer={this.submitPlayer.bind(this)}/>;\n        else if (phase === 'night')\n            return <Night players={this.state.players} night={this.state.night}\n                          submitActions={this.submitActions.bind(this)}/>;\n        else if (phase === 'day')\n            return <Day events={this.state.events}\n                        night={this.state.night}\n                        players={this.state.players}\n                        originPlayers={this.state.originPlayers}\n                        executePlayer={this.executePlayer.bind(this)}\n                        logs={this.state.logs}\n                        gameOver={this.state.gameOver} restart={this.restart.bind(this)}/>;\n        else\n            return <div> {phase} </div>\n    }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\nimport {CSSTransitionGroup} from 'react-transition-group' // ES6\nimport './App.css';\n\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport class Night extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPlayer: this.props.players[0],\n            currentIndex: 0,\n            actions: {},\n        }\n    }\n\n    async addAction(e) {\n        e.preventDefault();\n\n        // Blank the page\n        this.refs['main'].innerHTML = '<img alt=\"spinner\" src=\"https://thumbs.gfycat.com/CarelessOccasionalArgusfish-small.gif\" height=\"40px\" />' ;\n        await sleep(200);\n\n        let actions = this.state.actions;\n        this.props.players.forEach((player, index) => {\n            let refDiv = this.refs[player.pname];\n            let checkbox = refDiv.childNodes[0];\n            if (checkbox.checked) {\n                actions[this.state.currentIndex] = index;\n                checkbox.checked = false;\n                refDiv.style.background = '';\n                refDiv.style.color = '';\n            }\n        });\n\n        this.setState({actions: actions});\n\n        let index = this.state.currentIndex;\n        index += 1;\n        if (index === this.props.players.length) {\n            this.props.submitActions(this.state.actions);\n        } else {\n            this.setState({\n                currentIndex: index\n            });\n        }\n    }\n\n    changeColor() {\n        this.props.players.forEach((player, index) => {\n            let divRef = this.refs[player.pname];\n            if (divRef.childNodes[0].checked) {\n                divRef.style.background = 'red';\n                divRef.style.color = 'white';\n            } else {\n                divRef.style.background = 'lightcoral';\n                divRef.style.color = '';\n            }\n        });\n    }\n\n    render() {\n        let currentPlayer = this.props.players[this.state.currentIndex].pname;\n        let row = this.props.players.map((player, index) =>\n            <div ref={player.pname} key={player.pname} className=\"radio-div\" onClick={this.changeColor.bind(this)}>\n                <input type=\"radio\" id={player.pname} name=\"target\" className=\"radio-input\" required/>\n                <label className=\"radio-label\" htmlFor={player.pname}>{player.pname}</label>\n            </div>\n        );\n        return (\n            <div key={currentPlayer} className=\"animated fadeIn\">\n                <h2>Night {this.props.night}</h2>\n                <h3>Turn of <span className=\"text-white\"> {currentPlayer}</span></h3>\n                <form onSubmit={(e) => this.addAction.bind(this)(e)}>\n                    {row}\n                    <button ref='main' type=\"submit\" className=\"mt-3 btn btn-danger\">Next</button>\n                </form>\n            </div>\n        );\n    }\n}\n","import React, {Component} from \"react\";\n\nexport class Day extends Component {\n    skipExecute() {\n        this.props.executePlayer(null);\n    }\n\n    executePlayer(e) {\n        e.preventDefault();\n        this.props.players.forEach((player, index) => {\n            if (this.refs[player.pname].childNodes[0].checked) {\n                this.props.executePlayer(player)\n            }\n        });\n    }\n\n    changeColor() {\n        this.props.players.forEach((player, index) => {\n            let divRef = this.refs[player.pname];\n            if (divRef.childNodes[0].checked) {\n                divRef.style.background = 'red';\n                divRef.style.color = 'white';\n            } else {\n                divRef.style.background = '';\n                divRef.style.color = '';\n            }\n        });\n    }\n\n    render() {\n        let row = [];\n        this.props.players.forEach((player, index) => {\n            let inp = <div ref={player.pname} key={player.pname} className=\"radio-div\"\n                           onClick={this.changeColor.bind(this)}>\n                <input type=\"radio\" id={player.pname} name=\"target\" className=\"radio-input\"\n                       required/>\n                <label className=\"radio-label\" htmlFor={player.pname}>{player.pname}</label>\n            </div>;\n            row.push(inp)\n        });\n        let originPlayers = this.props.originPlayers.map(player =>\n            <li key={'origin' + player.pname}>{player.pname}: {player.role} {player.active_wolf}</li>);\n        return (\n            <div className=\"animated fadeInLeft\" key={this.props.night}>\n                <h3>Events: </h3>\n                <ul>\n                    {this.props.events ? this.props.events : \"Nothing happened\"}\n                </ul>\n\n                {this.props.gameOver !== null\n                    ? <div>\n                        <h3>{this.props.gameOver}</h3>\n                        <ul>{originPlayers}</ul>\n                        <h3>History</h3>\n                        <ul>{this.props.logs}</ul>\n                        <button onClick={() => this.props.restart()} className=\"btn btn-danger\">New game</button>\n                    </div>\n                    : <div>\n                        <h3> Who's the wolf ? </h3>\n                        <form onSubmit={(e) => this.executePlayer.bind(this)(e)}>\n                            {row}\n                            <button type=\"submit\" className=\"mt-3 mr-3 btn btn-danger\">Execute</button>\n                            <button onClick={this.skipExecute.bind(this)} className=\"mt-3 btn btn-secondary\">Skip\n                            </button>\n                        </form>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Werewolf';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}